
#Область Команды

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если ТаблицаПартнеров.Количество()=0 Тогда
		Сообщить("Заполните таблицу условий!");
		Возврат;
	КонецЕсли; 
	
	// пока неясно, нужно ли это в новой базе...
	//ЗапросД = Новый Запрос;
	//ЗапросД.Текст = "ВЫБРАТЬ
	//|	СоглашенияСКлиентами.Ссылка
	//|ИЗ
	//|	Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	//|ГДЕ
	//|	СоглашенияСКлиентами.Типовое
	//|	И СоглашенияСКлиентами.Наименование = &Наименование";
	//ЗапросД.УстановитьПараметр("Наименование",	"Аварийный договор");
	//
	//ВыборкаД = ЗапросД.Выполнить().Выбрать();
	//Если ВыборкаД.Следующий() Тогда
	//	АварийныйДоговор = ВыборкаД.Ссылка;
	//Иначе
	//	Сообщить("Не найден аварийный типовой договор, расчет невозможен!");
	//	Возврат;
	//КонецЕсли;
	
	Для каждого СтрокаТаблицыПартнеров Из ТаблицаПартнеров Цикл
		Если НЕ СтрокаТаблицыПартнеров.Пометка Тогда
			Продолжить;
		КонецЕсли;	
		
		ПараметрыДокум = Новый Структура;
		ПараметрыДокум.Вставить("Партнер",			СтрокаТаблицыПартнеров.Партнер);
		ПараметрыДокум.Вставить("КонтактноеЛицо",	СтрокаТаблицыПартнеров.КонтактноеЛицо);
		ПараметрыДокум.Вставить("УсловиеКМ",	СтрокаТаблицыПартнеров.УсловиеКМ);
		ПараметрыДокум.Вставить("Ответственный",	СтрокаТаблицыПартнеров.Ответственный);
		ПараметрыДокум.Вставить("ДатаНачала", 		СтрокаТаблицыПартнеров.НачалоПериода);
		ПараметрыДокум.Вставить("ДатаОкончания",	КонецДня(СтрокаТаблицыПартнеров.ОкончаниеПериода));
		
		ТаблицаДляЗачетовАванса = ЗачестьАвансы(ПараметрыДокум);
		Если ТаблицаДляЗачетовАванса = 0 Тогда
		Иначе	
			// пока неясно, нужно ли это в новой базе...
			//Для каждого СтрокаТЗ Из ТаблицаДляЗачетовАванса Цикл
			//	Если НЕ СтрокаТЗ.Документ = Неопределено И НЕ СтрокаТЗ.Документ = Документы.РеализацияТоваровУслуг.ПустаяСсылка() Тогда
			//		ПараметрыФормы = Новый Структура("Документ", СтрокаТЗ.Документ);
			//		ФормаЗачетаОплат = ПолучитьФорму("Обработка.ПомощникЗачетаОплат.Форма",
			//		ПараметрыФормы
			//		);
			//		МассивСтрок = Новый Массив;
			//		Для Каждого СтрокаТаблицы Из ФормаЗачетаОплат.Оплаты Цикл
			//			МассивСтрок.Добавить(СтрокаТаблицы.ПолучитьИдентификатор());
			//		КонецЦикла;
			//		ФормаЗачетаОплат.РассчитатьСуммуЗачетаАванса();
			//		Недостает = ФормаЗачетаОплат.Недостает;
			//		ФормаЗачетаОплат.ЗаполнитьСуммыЗачетаОплаты(МассивСтрок);
			//		СуммаЗачета = Недостает - ФормаЗачетаОплат.Недостает;
			//		Если СуммаЗачета > 0 Тогда
			//			МассивОбработанныхДокументов = Новый Массив;
			//			Отказ = Ложь;
			//			ФормаЗачетаОплат.СохранитьРезультатЗачетаОплаты(МассивОбработанныхДокументов, Отказ);
			//		КонецЕсли;
			//	КонецЕсли; 
			//КонецЦикла; 
		КонецЕсли; 
		
		СМСка = СформироватьНаСервере(ПараметрыДокум);
		ПоказатьОповещениеПользователя(СМСка.СМС, СМСка.Ссылка,,);
		
		СтрокаТаблицыПартнеров.Результат = СМСка.Результат;
		СтрокаТаблицыПартнеров.ДокументНачисления = СМСка.Ссылка;
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура Перезаполнить(Команда)   	
	
	мсвДокументы = Элементы.СпиокДокументов.ВыделенныеСтроки;
	ПерезаполнитьНаСервере(мсвДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	Для Каждого ИдентификаторСтроки Из Элементы.ТаблицаПартнеров.ВыделенныеСтроки Цикл
		СтрокаТЗ = ТаблицаПартнеров.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаТЗ.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры 
&НаКлиенте
Процедура СнятьПометки(Команда)
	
	Для Каждого ИдентификаторСтроки Из Элементы.ТаблицаПартнеров.ВыделенныеСтроки Цикл
		СтрокаТЗ = ТаблицаПартнеров.НайтиПоИдентификатору(ИдентификаторСтроки);
		СтрокаТЗ.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Период.Вариант = ВариантСтандартногоПериода.ПрошлыйМесяц;
	ЭтоВнешняяОбработка = (нрег(Лев(ИмяФормы, 10)) <> "обработка.");
	
	Если НЕ РольДоступна("ПолныеПрава") И НЕ РольДоступна("_РедактированиеКМ") Тогда 
		Отказ = Истина;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементовФормы

&НаКлиенте
Процедура ТаблицаПартнеровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТаблицаПартнеров.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда  
		Если ЗначениеЗаполнено(ТекДанные.ДокументНачисления) Тогда 
			ПоказатьЗначение(, ТекДанные.ДокументНачисления);
		ИначеЕсли ТекДанные.Результат = 2 Тогда 
			Сообщить("По строке нет данных для начисления КМ");
		ИначеЕсли ТекДанные.Результат = 3 Тогда 
			Сообщить("При создании начисления по строке произошла ошибка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОсновныеПроцедуры

&НаСервере
Процедура ЗаполнитьНаСервере()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИСТИНА КАК Пометка,
	//|	_ПериодДействияКМ.КонтактноеЛицо.Владелец КАК Партнер,
	|	_ПериодДействияКМ.Партнер КАК Партнер,
	|	_ПериодДействияКМ.УсловиеКМ,
	|	_ПериодДействияКМ.КонтактноеЛицо,
	|	_ПериодДействияКМ.Ответственный,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(_ПериодДействияКМ.ДатаНачалаДействия, ДЕНЬ) > &ДатаНачалаДействия
	|			ТОГДА _ПериодДействияКМ.ДатаНачалаДействия
	|		ИНАЧЕ &ДатаНачалаДействия
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(_ПериодДействияКМ.ДатаОкончанияДействия, ДЕНЬ) < &ДатаОкончанияДействия
	|			ТОГДА _ПериодДействияКМ.ДатаОкончанияДействия
	|		ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончанияДействия, ДЕНЬ)
	|	КОНЕЦ КАК ОкончаниеПериода,
	|	0 КАК Результат,
	|	&ДокПустаяСсылка КАК ДокументНачисления
	|ИЗ
	|	РегистрСведений._ПериодДействияКМ КАК _ПериодДействияКМ
	|ГДЕ
	|	_ПериодДействияКМ.ДатаНачалаДействия <= &ДатаОкончанияДействия
	//|	И _ПериодДействияКМ.ДатаОкончанияДействия >= &ДатаОкончанияДействия";
	|	И _ПериодДействияКМ.ДатаОкончанияДействия >= &ДатаНачалаДействия";
	
	Запрос.УстановитьПараметр("ДатаНачалаДействия",		Период.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияДействия",	НачалоДня(Период.ДатаОкончания));
	Запрос.УстановитьПараметр("ДокПустаяСсылка",		Документы._НачислениеКМ.ПустаяСсылка());
	
	Рез = Запрос.Выполнить();	
	Если Рез.Пустой() Тогда
		Сообщить("Нет условий для начисления КМ в указанном периоде!");
	Иначе
		ЗначениеВРеквизитФормы(Рез.Выгрузить(), "ТаблицаПартнеров");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьНаСервере(ПараметрыДокум)
	
	НовДок 					= Документы._НачислениеКМ.СоздатьДокумент();
	НовДок.Дата 			= ТекущаяДата();
	НовДок.Статус 			= Перечисления.СтатусыПланов.ВПодготовке;
	НовДок.Партнер 			= ПараметрыДокум.Партнер;
	НовДок.КонтактноеЛицо 	= ПараметрыДокум.КонтактноеЛицо;
	НовДок.УсловиеКМ 		= ПараметрыДокум.УсловиеКМ;
	НовДок.Ответственный 	= ПараметрыДокум.Ответственный;
	НовДок.ДатаНачала 		= ПараметрыДокум.ДатаНачала;
	НовДок.ДатаОкончания 	= ПараметрыДокум.ДатаОкончания;
	
	Если ЭтоВнешняяОбработка Тогда 
		РассчитатьНачислениеПоДокументамПродажи(НовДок);
	Иначе
		Документы._НачислениеКМ.РассчитатьНачислениеПоДокументамПродажи(НовДок);
	КонецЕсли;
	
	РезультатыОбр = Новый Структура;
	
	Если НовДок.НачислениеПоДокументамПродажи.Количество() = 0 Тогда
		РезультатыОбр.Вставить("СМС","По партнеру "+ПараметрыДокум.Партнер+" ничего не начислено!");		
		РезультатыОбр.Вставить("Ссылка","");
		РезультатыОбр.Вставить("Результат", 2);
	Иначе
		Попытка
			НовДок.Записать(РежимЗаписиДокумента.Проведение);
			РезультатыОбр.Вставить("СМС","Успешное проведение ");
			РезультатыОбр.Вставить("Ссылка", НовДок.Ссылка); //ПолучитьНавигационнуюСсылку(НовДок));
			РезультатыОбр.Вставить("Результат", 1);
		Исключение
			РезультатыОбр.Вставить("СМС","Ошибка! По партнеру "+ПараметрыДокум.Партнер+" ничего не начислено!");
			РезультатыОбр.Вставить("Ссылка","");
			РезультатыОбр.Вставить("Результат", 3);
		КонецПопытки
		
	КонецЕсли; 
	
	Возврат РезультатыОбр;
	
КонецФункции

&НаСервере
Процедура ПерезаполнитьНаСервере(ВыделенныеСтроки)
	
	Для Каждого иДок Из ВыделенныеСтроки Цикл
		
		ДокОбъект = иДок.ПолучитьОбъект();
		
		Попытка
			ДокОбъект.Заблокировать();
		Исключение
			Сообщить("Невозможно заблокировать документ: " + ДокОбъект);
			Продолжить;
		КонецПопытки;
		
		Если ЭтоВнешняяОбработка Тогда 
			РассчитатьНачислениеПоДокументамПродажи(ДокОбъект);
		Иначе
			Документы._НачислениеКМ.РассчитатьНачислениеПоДокументамПродажи(ДокОбъект);
		КонецЕсли;
		
		Если ДокОбъект.Проведен Тогда 
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			ДокОбъект.Записать();
		КонецЕсли;
		
		Сообщить("Документ перезаполнен: " + ДокОбъект);
	КонецЦикла;
	
	Элементы.СпиокДокументов.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедуры

&НаСервере
Функция ЗачестьАвансы(Объект)
	
	// пока неясно, нужно ли это в новой базе...
	//Возврат Документы._НачислениеКМ.ВыполнитьЗачетыОплат(Объект);
	Возврат 0;
	
КонецФункции

&НаСервере
Функция ПолучитьПериодДействияКМ(ДокОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(_ПериодДействияКМ.ДатаНачалаДействия, ДЕНЬ) > &ДатаНачалаДействия
	|			ТОГДА _ПериодДействияКМ.ДатаНачалаДействия
	|		ИНАЧЕ &ДатаНачалаДействия
	|	КОНЕЦ КАК НачалоПериода,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(_ПериодДействияКМ.ДатаОкончанияДействия, ДЕНЬ) < &ДатаОкончанияДействия
	|			ТОГДА _ПериодДействияКМ.ДатаОкончанияДействия
	|		ИНАЧЕ КОНЕЦПЕРИОДА(&ДатаОкончанияДействия, ДЕНЬ)
	|	КОНЕЦ КАК ОкончаниеПериода
	|ИЗ
	|	РегистрСведений._ПериодДействияКМ КАК _ПериодДействияКМ
	|ГДЕ
	|	_ПериодДействияКМ.Партнер = &Партнер
	|	И _ПериодДействияКМ.УсловиеКМ = &УсловиеКМ
	|	И _ПериодДействияКМ.ДатаНачалаДействия <= &ДатаОкончанияДействия
	|	И _ПериодДействияКМ.ДатаОкончанияДействия >= &ДатаНачалаДействия";
	
	Запрос.УстановитьПараметр("ДатаНачалаДействия",		ДокОбъект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончанияДействия",	ДокОбъект.ДатаОкончания);
	Запрос.УстановитьПараметр("Партнер",				ДокОбъект.Партнер);
	Запрос.УстановитьПараметр("УсловиеКМ",				ДокОбъект.УсловиеКМ);
	
	Рез = Запрос.Выполнить();	
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Рез.Выбрать();
		Выборка.Следующий();
		Возврат Новый Структура("НачалоПериода, ОкончаниеПериода", Выборка.НачалоПериода, Выборка.ОкончаниеПериода);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПеренесеноИзМодуляМенеджераДокумента

&НаСервере
Процедура РассчитатьНачислениеПоДокументамПродажи(ДокОбъект)
	
	ДокОбъект.НачислениеПоДокументамПродажи.Очистить();
	
	// 1. получаем все оплаты за период
	// 2. вычисляем оплаченные этими оплатами на 100% реализации
	
	ТаблицаОплаченныхРеализаций = Новый ТаблицаЗначений;
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("АналитикаУчетаПоПартнерам");	
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("ЗаказКлиента");	
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("Регистратор");
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("ДокументПродажи");
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("Реализация");
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("СуммаДокумента");
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("СуммаОплачено");
	//ТаблицаОплаченныхРеализаций.Колонки.Добавить("СуммаЭтапа");  // сложно посчитать дату фактической оплаты по каждому этапу...
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("ДатаОплатыПлан");
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("ДатаОплатыФакт");
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("ПросрочкаДней");
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("КоэффициентПремии"); 
	ТаблицаОплаченныхРеализаций.Колонки.Добавить("РозничныйВидЦены"); 
	
	ЗапросОплат = Новый Запрос;
	ЗапросОплат.Текст = ПолучитьТекстЗапросаПоОплатам();   	
	
	ЗапросОплат.УстановитьПараметр("ИспользоватьГрафикОплатыИзСоглашенияСКлиентом", Истина); // возможно стоит дать выбор пользователю...
	
	ЗапросОплат.УстановитьПараметр("Партнер", 			ДокОбъект.Партнер);
	ЗапросОплат.УстановитьПараметр("УсловиеКМ", 		ДокОбъект.УсловиеКМ);
	ЗапросОплат.УстановитьПараметр("Дата1", 			ДокОбъект.ДатаНачала);
	ЗапросОплат.УстановитьПараметр("Дата2", 			КонецДня(ДокОбъект.ДатаОкончания));
	ЗапросОплат.УстановитьПараметр("ГрафикНеЗаполнен", 	Справочники.ГрафикиОплаты.ПустаяСсылка());
	ЗапросОплат.УстановитьПараметр("ПоНакладным", 		Перечисления.ПорядокРасчетов.ПоНакладным);
	
	// 3. вычисляем даты оплаты по этим реализациям
	
	ЗапросОстатков = Новый Запрос;
	ЗапросОстатков.Текст = ПолучитьТекстЗапросаПоОстаткамПоРегистраторам();
	
	ЗапросОстатков.УстановитьПараметр("Дата1", Дата(1,1,1)); //ДокОбъект.ДатаНачала);
	ЗапросОстатков.УстановитьПараметр("Дата2", КонецДня(ДокОбъект.ДатаОкончания));
	
	ОплаченныеРеализации_ВыборкаПоАналитикам = ЗапросОплат.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ОплаченныеРеализации_ВыборкаПоАналитикам.Следующий() Цикл
		ОплаченныеРеализации_ВыборкаПоЗаказам = ОплаченныеРеализации_ВыборкаПоАналитикам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОплаченныеРеализации_ВыборкаПоЗаказам.Следующий() Цикл
			
			// да, запрос в цикле пока.
			ЗапросОстатков.УстановитьПараметр("АналитикаУчетаПоПартнерам", 	ОплаченныеРеализации_ВыборкаПоЗаказам.АналитикаУчетаПоПартнерам);
			ЗапросОстатков.УстановитьПараметр("ЗаказКлиента", 				ОплаченныеРеализации_ВыборкаПоЗаказам.ЗаказКлиента);
			ОстаткиИОборотыПоАналитике = ЗапросОстатков.Выполнить().Выгрузить();
			
			ОплаченныеРеализации_ВыборкаРеализаций = ОплаченныеРеализации_ВыборкаПоЗаказам.Выбрать();
			Пока ОплаченныеРеализации_ВыборкаРеализаций.Следующий() Цикл
				
				НужноНайтиПогашениеСуммы = Неопределено;
				НайденоПогашениеСМоментаРеализации = 0;
				ДатаОплатыРеализации = Дата(1,1,1);
				Для Каждого иОстаток Из ОстаткиИОборотыПоАналитике Цикл
					//Если иОстаток.Регистратор = ОплаченныеРеализации_ВыборкаРеализаций.Реализация Тогда 
					Если иОстаток.Регистратор = ОплаченныеРеализации_ВыборкаРеализаций.Регистратор Тогда 
						НужноНайтиПогашениеСуммы = иОстаток.СуммаКонечныйОстаток; // = СуммаНачальныйОстаток + иОстаток.СуммаПриход;
					КонецЕсли;
					Если НужноНайтиПогашениеСуммы <> Неопределено Тогда 
						НайденоПогашениеСМоментаРеализации = НайденоПогашениеСМоментаРеализации + иОстаток.СуммаРасход;
						Если НайденоПогашениеСМоментаРеализации >= НужноНайтиПогашениеСуммы Тогда 
							ДатаОплатыРеализации = иОстаток.Период;
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				нов = ТаблицаОплаченныхРеализаций.Добавить();
				ЗаполнитьЗначенияСвойств(нов, ОплаченныеРеализации_ВыборкаРеализаций);
				
				нов.ДокументПродажи     = нов.Реализация;
				нов.ДатаОплатыФакт 		= ДатаОплатыРеализации;
				
				// 4. вычисляем просрочки по этим реализациям
				// 5. вычисляем коэффициент премии по этим реализациям
				
				нов.ПросрочкаДней	= (НачалоДня(нов.ДатаОплатыФакт) - НачалоДня(нов.ДатаОплатыПлан))/(24*60*60);
				
				Если НЕ ЗначениеЗаполнено(нов.ДатаОплатыФакт) Тогда
					нов.КоэффициентПремии = 0;
				ИначеЕсли нов.ПросрочкаДней > 61 Тогда 
					нов.КоэффициентПремии = 0;
				ИначеЕсли нов.ПросрочкаДней > 31 Тогда 
					нов.КоэффициентПремии = 0.65;
				ИначеЕсли нов.ПросрочкаДней > 5 Тогда 
					нов.КоэффициентПремии = 0.8;
				Иначе
					нов.КоэффициентПремии = 1;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(нов.ДатаОплатыПлан) Тогда 
					Сообщить("ВНИМАНИЕ! Не удалось получить планируемую дату платежа
					|	Регистратор 		= " + ОплаченныеРеализации_ВыборкаРеализаций.Регистратор + "
					|	Объект расчетов 	= " + ОплаченныеРеализации_ВыборкаРеализаций.ЗаказКлиента);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(нов.ДатаОплатыФакт) Тогда 
					Сообщить("ВНИМАНИЕ! Не удалось рассчитать дату фактической оплаты
					|	Регистратор 		= " + ОплаченныеРеализации_ВыборкаРеализаций.Регистратор + "
					|	Объект расчетов 	= " + ОплаченныеРеализации_ВыборкаРеализаций.ЗаказКлиента);
				КонецЕсли;
				Если ОплаченныеРеализации_ВыборкаРеализаций.СуммаДокумента <> ОплаченныеРеализации_ВыборкаРеализаций.СуммаЭтапов 
					И ТипЗнч(ОплаченныеРеализации_ВыборкаРеализаций.Регистратор) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда 
					
					Сообщить("ВНИМАНИЕ! Некорректно рассчитана сумм по этапам оплаты по документу 
					|	Регистратор 		= " + ОплаченныеРеализации_ВыборкаРеализаций.Регистратор + "
					|	Объект расчетов 	= " + ОплаченныеРеализации_ВыборкаРеализаций.ЗаказКлиента + "
					|	Сумма документа 	= " + ОплаченныеРеализации_ВыборкаРеализаций.СуммаДокумента + "
					|	Сумма этапов оплаты = " + ОплаченныеРеализации_ВыборкаРеализаций.СуммаЭтапов);
				КонецЕсли;
				Если ОплаченныеРеализации_ВыборкаРеализаций.СуммаДокумента <> ОплаченныеРеализации_ВыборкаРеализаций.СуммаОплачено Тогда 
					Сообщить("ВНИМАНИЕ! Возможно некорректно рассчитана сумма фактической оплаты по документу 
					|	Регистратор 		= " + ОплаченныеРеализации_ВыборкаРеализаций.Регистратор + "
					|	Объект расчетов 	= " + ОплаченныеРеализации_ВыборкаРеализаций.ЗаказКлиента + "
					|	Сумма документа 	= " + ОплаченныеРеализации_ВыборкаРеализаций.СуммаДокумента + "
					|	Сумма оплаты 		= " + ОплаченныеРеализации_ВыборкаРеализаций.СуммаОплачено);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросВозвратов = Новый Запрос;
	ЗапросВозвратов.Текст = ПолучитьТекстЗапросаПоВозвратамУчтенныхРеализаций();
	
	ЗапросВозвратов.УстановитьПараметр("Дата1", 	ДокОбъект.ДатаНачала);
	ЗапросВозвратов.УстановитьПараметр("Дата2", 	КонецДня(ДокОбъект.ДатаОкончания));
	ЗапросВозвратов.УстановитьПараметр("Условие", 	ДокОбъект.УсловиеКМ);
	
	ВозвратыИтог = ЗапросВозвратов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВозвратыИтог.Следующий() Цикл
		Возвраты = ВозвратыИтог.Выбрать();
		Пока Возвраты.Следующий() Цикл
			
			нов 							= ТаблицаОплаченныхРеализаций.Добавить();
			нов.АналитикаУчетаПоПартнерам 	= Возвраты.АналитикаУчетаПоПартнерам;
			нов.ЗаказКлиента 				= Возвраты.ЗаказКлиента;
			нов.ДокументПродажи				= Возвраты.ВозвратТоваров;
			нов.Регистратор					= Возвраты.ВозвратТоваров;
			нов.Реализация					= Возвраты.Реализация;
			нов.СуммаДокумента 				= Возвраты.ВозвратТоваровСуммаДокумента;
			нов.СуммаОплачено 				= Возвраты.ВозвратТоваровСуммаДокумента;
			//нов.ДатаОплатыПлан 			= 
			//нов.ДатаОплатыФакт 			= 
			//нов.ПросрочкаДней 			= 
			нов.КоэффициентПремии 			= -1;
			//нов.РозничныйВидЦены 			= Возвраты.хххххххххххххх;
			
			Если Возвраты.ПартнерВозврата <> Возвраты.ПартнерНачисления Тогда 
				Сообщить("ВНИМАНИЕ! По документу " + Возвраты.ВозвратТоваров + " ("+Возвраты.ПартнерВозврата+") реализация ("+Возвраты.Реализация+") была учтена по другиму партнеру ("+Возвраты.ПартнерНачисления+")!");
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
	// 6. убираем из расчета реализации, по которым уже были сделаны начисления
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НачислениеПоДокументамПродажи.Ссылка КАК _НачислениеКМ,
	|	НачислениеПоДокументамПродажи.Ссылка.Партнер КАК Партнер,
	|	НачислениеПоДокументамПродажи.ДокументПродажи КАК ДокументПродажи,
	|	ВЫБОР
	|		КОГДА НачислениеПоДокументамПродажи.ДокументПродажи ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА ВЫРАЗИТЬ(НачислениеПоДокументамПродажи.ДокументПродажи КАК Документ.РеализацияТоваровУслуг).Партнер
	|		КОГДА НачислениеПоДокументамПродажи.ДокументПродажи ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|			ТОГДА ВЫРАЗИТЬ(НачислениеПоДокументамПродажи.ДокументПродажи КАК Документ.ВозвратТоваровОтКлиента).Партнер
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументПродажиПартнер
	|ИЗ
	|	Документ._НачислениеКМ.НачислениеПоДокументамПродажи КАК НачислениеПоДокументамПродажи
	|ГДЕ
	|	НачислениеПоДокументамПродажи.ДокументПродажи В(&СписокДоков)
	|	И НачислениеПоДокументамПродажи.Ссылка <> &ЭтотДокумент
	|	И НачислениеПоДокументамПродажи.Ссылка.Проведен
	|	И НачислениеПоДокументамПродажи.Ссылка.УсловиеКМ = &УсловиеКМ";	
	
	Запрос.УстановитьПараметр("ЭтотДокумент", 	ДокОбъект.Ссылка);
	Запрос.УстановитьПараметр("УсловиеКМ", 		ДокОбъект.УсловиеКМ);
	Запрос.УстановитьПараметр("СписокДоков", 	ТаблицаОплаченныхРеализаций.ВыгрузитьКолонку("ДокументПродажи"));
	
	ВыборкаСуществующих = Запрос.Выполнить().Выбрать();
	Пока ВыборкаСуществующих.Следующий() Цикл 		
		Сообщить("По документу " + ВыборкаСуществующих.ДокументПродажи + " начисления "+ДокОбъект.УсловиеКМ+" уже были проведены в документе " + ВыборкаСуществующих._НачислениеКМ + " !");
		
		СтрокиРасчетаПодУдаление = ТаблицаОплаченныхРеализаций.НайтиСтроки(Новый Структура("ДокументПродажи", ВыборкаСуществующих.ДокументПродажи));
		Для Каждого иСтрока Из СтрокиРасчетаПодУдаление Цикл
			ТаблицаОплаченныхРеализаций.Удалить(иСтрока);
		КонецЦикла; 
		
		Если ВыборкаСуществующих.Партнер <> ВыборкаСуществующих.ДокументПродажиПартнер Тогда 
			Сообщить("ВНИМАНИЕ! По документу " + ВыборкаСуществующих.ДокументПродажи + " были проведены в документе " + ВыборкаСуществующих._НачислениеКМ + " с другим партнером!");
		КонецЕсли;
	КонецЦикла;
	
	// 7. вычитаем выручку по товарам с недостаточной наценкой по товарам в этих реализациях
	// 8. вычитаем выручку по номенклатуре, не подпадающей под действие системы клиентской мотивации
	// 9. применяем действующие условия мотивации по партнеру	
		
	ЗапросПоЦенам = Новый Запрос;
	ЗапросПоЦенам.Текст = ПолучитьТекстЗапросаПоНоменклатуреРеализаций();
	
	УсловиеКМПроцент 		= ДокОбъект.УсловиеКМ.Процент;
	УсловиеКМПроцентНаценки = ДокОбъект.УсловиеКМ.ПроцентНаценки;
	
	ЗапросПоЦенам.УстановитьПараметр("ПроцентКМ",			УсловиеКМПроцент);
	ЗапросПоЦенам.УстановитьПараметр("ПроцентНаценки", 		УсловиеКМПроцентНаценки);
	ЗапросПоЦенам.УстановитьПараметр("БезИсключения", 		НЕ ДокОбъект.УсловиеКМ.ИсключатьСегмент);
	ЗапросПоЦенам.УстановитьПараметр("НеНачислятьКМ",		Справочники.СегментыНоменклатуры.НайтиПоНаименованию("Не начислять КМ")); // тут надо потом указать какой-то элемент (например, предопределенный)...
	
	Для каждого СтрокаРасчета Из ТаблицаОплаченныхРеализаций Цикл
		
		СтрокаНачисления 					= ДокОбъект.НачислениеПоДокументамПродажи.Добавить();
		СтрокаНачисления.ДокументПродажи 	= СтрокаРасчета.ДокументПродажи;
		СтрокаНачисления.Сумма 				= СтрокаРасчета.СуммаДокумента;
		СтрокаНачисления.Оплачено 			= СтрокаРасчета.СуммаОплачено; // сейчас учитываются только полностью оплаченные продажи
		СтрокаНачисления.Коэффициент 		= ?(СтрокаРасчета.КоэффициентПремии < 0, -СтрокаРасчета.КоэффициентПремии, СтрокаРасчета.КоэффициентПремии);
		СтрокаНачисления.ДДС 				= Неопределено; // пока неясно, откуда брать статью движения денег...
		
		Если СтрокаРасчета.КоэффициентПремии = 0 Тогда 
			СтрокаНачисления.КодПроблемы 	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ") + "Коэфф-т просрочки: " + СтрокаНачисления.Коэффициент;			
			
		ИначеЕсли СтрокаРасчета.КоэффициентПремии >0 Тогда 
			
			Если СтрокаРасчета.РозничныйВидЦены = Неопределено Тогда 
				
				БазаНачисления 					= мин(СтрокаНачисления.Сумма, СтрокаНачисления.Оплачено);   			
				СтрокаНачисления.Начислено   	= БазаНачисления * СтрокаНачисления.Коэффициент;
				СтрокаНачисления.Удержано    	= БазаНачисления - СтрокаНачисления.Начислено;
				СтрокаНачисления.КодПроблемы 	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ")	+ "Без контроля цен в документе";
				СтрокаНачисления.СуммаКМ 		= СтрокаНачисления.Начислено * УсловиеКМПроцент / 100;
			 
			Иначе
				ЗапросПоЦенам.УстановитьПараметр("ДокументПродажи", 	СтрокаРасчета.ДокументПродажи);
				ЗапросПоЦенам.УстановитьПараметр("ВидЦен",				СтрокаРасчета.РозничныйВидЦены);		
				
				тзНарушения = ЗапросПоЦенам.Выполнить().Выгрузить();  // занимает 94% времени - запрос надо вытащить из цикла, если будут жалобы...
				
				КоэффициентСокращенияБазы = 1;
				
				Если тзНарушения.Количество()>0 Тогда
					
					СуммаУдержания 	= тзНарушения.Итог("Вычесть");
					СуммаИсключения = тзНарушения.Итог("СуммаИсключения");
					
					КоэффициентСокращенияБазы = 1 - мин(1, (СуммаУдержания + СуммаИсключения) / СтрокаНачисления.Сумма);
					
					Если СуммаИсключения = 0 Тогда
						СтрокаНачисления.КодПроблемы  	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ") 
														+ "Нарушение цены на сумму: " + СуммаУдержания;
					ИначеЕсли СуммаИсключения = СуммаУдержания Тогда 
						СтрокаНачисления.КодПроблемы  	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ") 
														+ "Сумма исключения из КМ: " + СуммаИсключения;
					Иначе
						СтрокаНачисления.КодПроблемы  	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ") 
														+ "Нарушение цены на сумму: " + СуммаУдержания + " (в т.ч. сумма исключения из КМ: " + СуммаИсключения + ")";
					КонецЕсли;
				КонецЕсли;
				
				БазаНачисления 					= мин(СтрокаНачисления.Сумма, СтрокаНачисления.Оплачено);   			
				СтрокаНачисления.Начислено   	= БазаНачисления * КоэффициентСокращенияБазы * СтрокаНачисления.Коэффициент;
				СтрокаНачисления.Удержано    	= БазаНачисления - СтрокаНачисления.Начислено;
				СтрокаНачисления.СуммаКМ 		= СтрокаНачисления.Начислено * УсловиеКМПроцент / 100;
			КонецЕсли;
			
			СтрокаНачисления.КодПроблемы 	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ") 
											+ ?(СтрокаНачисления.Коэффициент = 1, "", "Коэфф-т просрочки: " + СтрокаНачисления.Коэффициент);
			
		Иначе //Если СтрокаРасчета.КоэффициентПремии < 0 Тогда

			БазаНачисления 					= мин(СтрокаНачисления.Сумма, СтрокаНачисления.Оплачено); 			
			СтрокаНачисления.Удержано    	= БазаНачисления * СтрокаНачисления.Коэффициент;
			СтрокаНачисления.Начислено   	= 0;
			СтрокаНачисления.КодПроблемы 	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ") + "Возврат по учтенной в КМ реализации: " + СтрокаРасчета.Реализация;
			СтрокаНачисления.СуммаКМ 		= -1 * СтрокаНачисления.Удержано * УсловиеКМПроцент / 100;
		КонецЕсли;
		
		Если (СтрокаРасчета.Регистратор <> СтрокаРасчета.ДокументПродажи) Тогда 
			СтрокаНачисления.КодПроблемы 	= СтрокаНачисления.КодПроблемы + ?(СтрокаНачисления.КодПроблемы = "", "", "; ") + "Регистратор - " + СтрокаРасчета.Регистратор.Метаданные().Синоним;
		КонецЕсли;
		
	КонецЦикла;	
	
	ДокОбъект.СуммаДокумента = ДокОбъект.НачислениеПоДокументамПродажи.Итог("СуммаКМ");
	
КонецПроцедуры // ()
&НаСервере
Функция ПолучитьТекстЗапросаПоОплатам()
	
	// запрос возвращает список реализаций которые были полностью оплачены, но без даты оплаты
	
	Возврат
	РаспаковкаТекстаЗапроса(
	//"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	//|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	//|	Обороты.ЗаказКлиента КАК ЗаказКлиента,
	//|	СУММА(Обороты.СуммаРасход) КАК Оплата
	//|ПОМЕСТИТЬ втПоступлениеДенег
	//|ИЗ
	//|	РегистрНакопления.РасчетыСКлиентами.Обороты(&Дата1, &Дата2, Регистратор, ) КАК Обороты
	//|ГДЕ
	//|	Обороты.АналитикаУчетаПоПартнерам.Партнер = &Партнер
	//|	И НЕ Обороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	Обороты.АналитикаУчетаПоПартнерам,
	//|	Обороты.ЗаказКлиента
	//|
	//|ИМЕЮЩИЕ
	//|	СУММА(Обороты.СуммаРасход) > 0
	//|;
	//|
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступленияИАвансы.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПоступленияИАвансы.ЗаказКлиента КАК ЗаказКлиента,
	|	СУММА(ПоступленияИАвансы.СуммаОплаты) КАК Оплата
	|ПОМЕСТИТЬ втПоступлениеДенег
	|ИЗ
	|	(ВЫБРАТЬ
	|		Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Обороты.ЗаказКлиента КАК ЗаказКлиента,
	//|		Обороты.СуммаРасход КАК СуммаОплаты
	|		-Обороты.СуммаОборот КАК СуммаОплаты
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Обороты(&Дата1, &Дата2, Регистратор, ) КАК Обороты
	|	ГДЕ
	|		Обороты.АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|		И НЕ Обороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	    И Обороты.СуммаОборот < 0
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Остатки.АналитикаУчетаПоПартнерам,
	|		Остатки.ЗаказКлиента,
	|		-СУММА(Остатки.СуммаОстаток)
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентами.Остатки(&Дата1, ) КАК Остатки
	|	ГДЕ
	|		Остатки.АналитикаУчетаПоПартнерам.Партнер = &Партнер
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Остатки.АналитикаУчетаПоПартнерам,
	|		Остатки.ЗаказКлиента
	|	
	|	ИМЕЮЩИЕ
	|		СУММА(Остатки.СуммаОстаток) < 0) КАК ПоступленияИАвансы
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступленияИАвансы.АналитикаУчетаПоПартнерам,
	|	ПоступленияИАвансы.ЗаказКлиента
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПоступленияИАвансы.СуммаОплаты) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Остатки.ЗаказКлиента КАК ЗаказКлиента,
	|	Остатки.СуммаОстаток КАК Долг
	|ПОМЕСТИТЬ втДолги
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Остатки(ДОБАВИТЬКДАТЕ(&Дата2, СЕКУНДА, 1), ) КАК Остатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоступлениеДенег КАК втПоступлениеДенег
	|		ПО Остатки.АналитикаУчетаПоПартнерам = втПоступлениеДенег.АналитикаУчетаПоПартнерам
	|			И Остатки.ЗаказКлиента = втПоступлениеДенег.ЗаказКлиента
	|ГДЕ
	|	Остатки.СуммаОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступленияИДолги.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ПоступленияИДолги.ЗаказКлиента КАК ЗаказКлиента,
	|	&Дата2 КАК Край,
	|	0 КАК ПолуСумма,
	|	0 КАК Сдвиг,
	|	СУММА(ПоступленияИДолги.Сумма) КАК Долг
	|ПОМЕСТИТЬ Шаг_536870912
	|ИЗ
	|	(ВЫБРАТЬ
	|		втПоступлениеДенег.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		втПоступлениеДенег.ЗаказКлиента КАК ЗаказКлиента,
	|		втПоступлениеДенег.Оплата КАК Сумма
	|	ИЗ
	|		втПоступлениеДенег КАК втПоступлениеДенег
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втДолги.АналитикаУчетаПоПартнерам,
	|		втДолги.ЗаказКлиента,
	|		втДолги.Долг
	|	ИЗ
	|		втДолги КАК втДолги) КАК ПоступленияИДолги
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступленияИДолги.АналитикаУчетаПоПартнерам,
	|	ПоступленияИДолги.ЗаказКлиента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ЗаказКлиента КАК ЗаказКлиента,
	|	Обороты.Валюта КАК Валюта,
	|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента).ДокументРеализации КАК Реализация,
	|	СУММА(-Обороты.СуммаОборот) КАК СуммаВозврата
	|ПОМЕСТИТЬ ОборотыПоВозвратам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(
	|			,
	|			&Дата2,
	|			Регистратор,
	|			(АналитикаУчетаПоПартнерам, ЗаказКлиента) В
	|				(ВЫБРАТЬ
	|					Шаг.АналитикаУчетаПоПартнерам,
	|					Шаг.ЗаказКлиента
	|				ИЗ
	|					втПоступлениеДенег КАК Шаг)) КАК Обороты
	|ГДЕ
	|	Обороты.СуммаОборот < 0
	|	И Обороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента).ДокументРеализации,
	|	Обороты.ЗаказКлиента,
	|	Обороты.Валюта,
	|	Обороты.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ЗаказКлиента КАК ЗаказКлиента,
	|	Обороты.Валюта КАК Валюта,
	|	Обороты.Период КАК Период,
	|	Обороты.Регистратор КАК Регистратор,
	|	Обороты.СуммаОборот - ЕСТЬNULL(ОборотыПоВозвратам.СуммаВозврата, 0) КАК СуммаОборот
	|ПОМЕСТИТЬ ОборотыРазвернуто
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(
	|			,
	|			&Дата2,
	|			Регистратор,
	|			(АналитикаУчетаПоПартнерам, ЗаказКлиента) В
	|				(ВЫБРАТЬ
	|					Шаг.АналитикаУчетаПоПартнерам,
	|					Шаг.ЗаказКлиента
	|				ИЗ
	|					втПоступлениеДенег КАК Шаг)) КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОборотыПоВозвратам КАК ОборотыПоВозвратам
	|		ПО Обороты.АналитикаУчетаПоПартнерам = ОборотыПоВозвратам.АналитикаУчетаПоПартнерам
	|			И Обороты.ЗаказКлиента = ОборотыПоВозвратам.ЗаказКлиента
	|			И Обороты.Валюта = ОборотыПоВозвратам.Валюта
	|			И Обороты.Регистратор = ОборотыПоВозвратам.Реализация
	|ГДЕ
	|	Обороты.СуммаОборот - ЕСТЬNULL(ОборотыПоВозвратам.СуммаВозврата, 0) > 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ЗаказКлиента КАК ЗаказКлиента,
	|	Обороты.Период КАК Период,
	|	СУММА(Обороты.СуммаОборот) КАК СуммаОборот
	|ПОМЕСТИТЬ Обороты
	|ИЗ
	|	ОборотыРазвернуто КАК Обороты
	|
	|СГРУППИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ЗаказКлиента,
	|	Обороты.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Обороты.АналитикаУчетаПоПартнерам,
	|	Обороты.ЗаказКлиента,
	|	Обороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|	Шаг.Край КАК Край,
	|	Шаг.Долг КАК Долг,
	|	ЕСТЬNULL(СУММА(Обороты.СуммаОборот), 0) КАК ПолуСумма,
	|	ВЫБОР
	|		КОГДА Шаг.Долг > ЕСТЬNULL(СУММА(Обороты.СуммаОборот), 0)
	|			ТОГДА -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сдвиг
	|ПОМЕСТИТЬ Шаг_1
	|ИЗ
	|	(ВЫБРАТЬ
	|		Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|		Шаг.Долг + Шаг.Сдвиг * Шаг.ПолуСумма КАК Долг,
	|		ДОБАВИТЬКДАТЕ(Шаг.Край, СЕКУНДА, 536870912 * (Шаг.Сдвиг - 0.5) + 1) КАК Центр,
	|		ДОБАВИТЬКДАТЕ(Шаг.Край, СЕКУНДА, 536870912 * Шаг.Сдвиг) КАК Край
	|	ИЗ
	|		Шаг_536870912 КАК Шаг) КАК Шаг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО Шаг.АналитикаУчетаПоПартнерам = Обороты.АналитикаУчетаПоПартнерам
	|			И Шаг.ЗаказКлиента = Обороты.ЗаказКлиента
	|			И (Обороты.Период МЕЖДУ Шаг.Центр И Шаг.Край)
	|
	|СГРУППИРОВАТЬ ПО
	|	Шаг.АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента,
	|	Шаг.Край,
	|	Шаг.Долг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|	Шаг.Край КАК Край,
	|	Шаг.Долг КАК Долг,
	|	ЕСТЬNULL(СУММА(Обороты.СуммаОборот), 0) КАК Сумма
	|ПОМЕСТИТЬ Шаг_0
	|ИЗ
	|	(ВЫБРАТЬ
	|		Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|		Шаг.Долг + Шаг.Сдвиг * Шаг.ПолуСумма КАК Долг,
	|		ДОБАВИТЬКДАТЕ(Шаг.Край, СЕКУНДА, Шаг.Сдвиг) КАК Край
	|	ИЗ
	|		Шаг_1 КАК Шаг) КАК Шаг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО Шаг.АналитикаУчетаПоПартнерам = Обороты.АналитикаУчетаПоПартнерам
	|			И Шаг.ЗаказКлиента = Обороты.ЗаказКлиента
	|			И (Обороты.Период = Шаг.Край)
	|
	|СГРУППИРОВАТЬ ПО
	|	Шаг.АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента,
	|	Шаг.Край,
	|	Шаг.Долг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|	Обороты.Период КАК Период,
	|	Обороты.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Обороты.Период = Шаг.Край
	|			ТОГДА Шаг.Долг * Обороты.СуммаОборот / Шаг.Сумма
	|		ИНАЧЕ Обороты.СуммаОборот
	|	КОНЕЦ КАК ДолгИлиОплата,
	|	РАЗНОСТЬДАТ(Обороты.Период, &Дата2, ДЕНЬ) КАК Долгота
	|ПОМЕСТИТЬ втНеоплаченныеИОплаченные
	|ИЗ
	|	Шаг_0 КАК Шаг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыРазвернуто КАК Обороты
	|		ПО Шаг.АналитикаУчетаПоПартнерам = Обороты.АналитикаУчетаПоПартнерам
	|			И Шаг.ЗаказКлиента = Обороты.ЗаказКлиента
	|			И Шаг.Край <= Обороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Остатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Остатки.ЗаказКлиента КАК ЗаказКлиента,
	|	&Дата2 КАК Край,
	|	Остатки.Долг КАК Долг,
	|	0 КАК ПолуСумма,
	|	0 КАК Сдвиг
	|ПОМЕСТИТЬ ДопШаг_536870912
	|ИЗ
	|	втДолги КАК Остатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|	Шаг.Край КАК Край,
	|	Шаг.Долг КАК Долг,
	|	ЕСТЬNULL(СУММА(Обороты.СуммаОборот), 0) КАК ПолуСумма,
	|	ВЫБОР
	|		КОГДА Шаг.Долг > ЕСТЬNULL(СУММА(Обороты.СуммаОборот), 0)
	|			ТОГДА -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сдвиг
	|ПОМЕСТИТЬ ДопШаг_1
	|ИЗ
	|	(ВЫБРАТЬ
	|		Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|		Шаг.Долг + Шаг.Сдвиг * Шаг.ПолуСумма КАК Долг,
	|		ДОБАВИТЬКДАТЕ(Шаг.Край, СЕКУНДА, 536870912 * (Шаг.Сдвиг - 0.5) + 1) КАК Центр,
	|		ДОБАВИТЬКДАТЕ(Шаг.Край, СЕКУНДА, 536870912 * Шаг.Сдвиг) КАК Край
	|	ИЗ
	|		ДопШаг_536870912 КАК Шаг) КАК Шаг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО Шаг.АналитикаУчетаПоПартнерам = Обороты.АналитикаУчетаПоПартнерам
	|			И Шаг.ЗаказКлиента = Обороты.ЗаказКлиента
	|			И (Обороты.Период МЕЖДУ Шаг.Центр И Шаг.Край)
	|
	|СГРУППИРОВАТЬ ПО
	|	Шаг.АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента,
	|	Шаг.Край,
	|	Шаг.Долг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|	Шаг.Край КАК Край,
	|	Шаг.Долг КАК Долг,
	|	ЕСТЬNULL(СУММА(Обороты.СуммаОборот), 0) КАК Сумма
	|ПОМЕСТИТЬ ДопШаг_0
	|ИЗ
	|	(ВЫБРАТЬ
	|		Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|		Шаг.Долг + Шаг.Сдвиг * Шаг.ПолуСумма КАК Долг,
	|		ДОБАВИТЬКДАТЕ(Шаг.Край, СЕКУНДА, Шаг.Сдвиг) КАК Край
	|	ИЗ
	|		ДопШаг_1 КАК Шаг) КАК Шаг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Обороты КАК Обороты
	|		ПО Шаг.АналитикаУчетаПоПартнерам = Обороты.АналитикаУчетаПоПартнерам
	|			И Шаг.ЗаказКлиента = Обороты.ЗаказКлиента
	|			И (Обороты.Период = Шаг.Край)
	|
	|СГРУППИРОВАТЬ ПО
	|	Шаг.АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента,
	|	Шаг.Край,
	|	Шаг.Долг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Шаг.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаг.ЗаказКлиента КАК ЗаказКлиента,
	|	Обороты.Период КАК Период,
	|	Обороты.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА Обороты.Период = Шаг.Край
	|			ТОГДА Шаг.Долг * Обороты.СуммаОборот / Шаг.Сумма
	|		ИНАЧЕ Обороты.СуммаОборот
	|	КОНЕЦ КАК Долг,
	|	РАЗНОСТЬДАТ(Обороты.Период, &Дата2, ДЕНЬ) КАК Долгота
	|ПОМЕСТИТЬ втНеоплаченные
	|ИЗ
	|	ДопШаг_0 КАК Шаг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОборотыРазвернуто КАК Обороты
	|		ПО Шаг.АналитикаУчетаПоПартнерам = Обороты.АналитикаУчетаПоПартнерам
	|			И Шаг.ЗаказКлиента = Обороты.ЗаказКлиента
	|			И Шаг.Край <= Обороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНеоплаченныеИОплаченные.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втНеоплаченныеИОплаченные.ЗаказКлиента КАК ЗаказКлиента,
	|	втНеоплаченныеИОплаченные.Регистратор КАК Регистратор,
	|	втНеоплаченныеИОплаченные.Период КАК Период,
	|	втНеоплаченныеИОплаченные.ДолгИлиОплата - ЕСТЬNULL(втНеоплаченные.Долг, 0) КАК СуммаОплачено
	|ПОМЕСТИТЬ втСписокОплаченныхДокументов
	|ИЗ
	|	втНеоплаченныеИОплаченные КАК втНеоплаченныеИОплаченные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНеоплаченные КАК втНеоплаченные
	|		ПО втНеоплаченныеИОплаченные.АналитикаУчетаПоПартнерам = втНеоплаченные.АналитикаУчетаПоПартнерам
	|			И втНеоплаченныеИОплаченные.ЗаказКлиента = втНеоплаченные.ЗаказКлиента
	|			И втНеоплаченныеИОплаченные.Регистратор = втНеоплаченные.Регистратор
	|ГДЕ
	|	втНеоплаченныеИОплаченные.ДолгИлиОплата <> ЕСТЬNULL(втНеоплаченные.Долг, 0)
	|	И ЕСТЬNULL(втНеоплаченные.Долг, 0) = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСписокОплаченныхДокументов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втСписокОплаченныхДокументов.ЗаказКлиента КАК ЗаказКлиента,
	|	ВЫРАЗИТЬ(втСписокОплаченныхДокументов.Регистратор КАК Документ.РеализацияТоваровУслуг) КАК Реализация,
	|	ВЫРАЗИТЬ(втСписокОплаченныхДокументов.Регистратор КАК Документ.РеализацияТоваровУслуг).СуммаДокумента КАК СуммаДокумента,
	|	ВЫРАЗИТЬ(втСписокОплаченныхДокументов.Регистратор КАК Документ.РеализацияТоваровУслуг).Дата КАК РеализацияДата,
	|	ВЫРАЗИТЬ(втСписокОплаченныхДокументов.Регистратор КАК Документ.РеализацияТоваровУслуг).Склад КАК РеализацияСклад,
	|	втСписокОплаченныхДокументов.Период КАК Период,
	|	втСписокОплаченныхДокументов.СуммаОплачено КАК СуммаОплачено
	|ПОМЕСТИТЬ втСписокРеализаций
	|ИЗ
	|	втСписокОплаченныхДокументов КАК втСписокОплаченныхДокументов
	|ГДЕ
	|	втСписокОплаченныхДокументов.Регистратор ССЫЛКА Документ.РеализацияТоваровУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСписокОплаченныхДокументов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втСписокОплаченныхДокументов.ЗаказКлиента КАК ЗаказКлиента,
	|	втСписокОплаченныхДокументов.Регистратор КАК Регистратор,
	|	втСписокОплаченныхДокументов.Период КАК Период,
	|	втСписокОплаченныхДокументов.СуммаОплачено КАК СуммаОплачено
	|ПОМЕСТИТЬ втСписокПрочихОплаченныхДокументов
	|ИЗ
	|	втСписокОплаченныхДокументов КАК втСписокОплаченныхДокументов
	|ГДЕ
	|	втСписокОплаченныхДокументов.Регистратор ССЫЛКА Документ.ВводОстатков
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	втСписокОплаченныхДокументов.Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСписокПрочихОплаченныхДокументов.Период КАК Период,
	|	втСписокПрочихОплаченныхДокументов.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втСписокПрочихОплаченныхДокументов.ЗаказКлиента КАК ЗаказКлиента,
	|	втСписокПрочихОплаченныхДокументов.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор
	|	КОНЕЦ КАК Реализация,
	|	СУММА(РасчетыСКлиентами.Сумма) КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(РасчетыСКлиентами.ДатаПлатежа) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА МАКСИМУМ(РасчетыСКлиентами.ДатаРегистратора)
	|		ИНАЧЕ МАКСИМУМ(РасчетыСКлиентами.ДатаПлатежа)
	|	КОНЕЦ КАК ДатаПлатежа,
	|	втСписокПрочихОплаченныхДокументов.СуммаОплачено КАК СуммаОплачено
	|ПОМЕСТИТЬ втРезультатПоПрочимОплаченнымДокументам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами КАК РасчетыСКлиентами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокПрочихОплаченныхДокументов КАК втСписокПрочихОплаченныхДокументов
	|		ПО РасчетыСКлиентами.Регистратор = втСписокПрочихОплаченныхДокументов.Регистратор
	|			И РасчетыСКлиентами.АналитикаУчетаПоПартнерам = втСписокПрочихОплаченныхДокументов.АналитикаУчетаПоПартнерам
	|			И РасчетыСКлиентами.ЗаказКлиента = втСписокПрочихОплаченныхДокументов.ЗаказКлиента
	|
	|СГРУППИРОВАТЬ ПО
	|	втСписокПрочихОплаченныхДокументов.Период,
	|	втСписокПрочихОплаченныхДокументов.Регистратор,
	|	втСписокПрочихОплаченныхДокументов.АналитикаУчетаПоПартнерам,
	|	втСписокПрочихОплаченныхДокументов.ЗаказКлиента,
	|	втСписокПрочихОплаченныхДокументов.СуммаОплачено,
	|	ВЫБОР
	|		КОГДА РасчетыСКлиентами.ЗаказКлиента ССЫЛКА Документ.РеализацияТоваровУслуг
	|			ТОГДА РасчетыСКлиентами.ЗаказКлиента
	|		ИНАЧЕ РасчетыСКлиентами.Регистратор
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСписокРеализаций.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втСписокРеализаций.ЗаказКлиента КАК ЗаказКлиента,
	|	втСписокРеализаций.Реализация КАК Реализация,
	|	втСписокРеализаций.РеализацияДата КАК РеализацияДата,
	|	втСписокРеализаций.РеализацияСклад КАК РеализацияСклад,
	|	втСписокРеализаций.СуммаДокумента КАК СуммаДокумента,
	|	втСписокРеализаций.Период КАК Период,
	|	втСписокРеализаций.СуммаОплачено КАК СуммаОплачено,
	|	ВЫБОР
	|		КОГДА &ИспользоватьГрафикОплатыИзСоглашенияСКлиентом
	|			ТОГДА ВЫБОР
	|					КОГДА втСписокРеализаций.Реализация.Соглашение.ГрафикОплаты = &ГрафикНеЗаполнен
	|						ТОГДА втСписокРеализаций.Реализация.ЗаказКлиента
	|					ИНАЧЕ втСписокРеализаций.Реализация.Соглашение.ГрафикОплаты
	|				КОНЕЦ
	|		ИНАЧЕ втСписокРеализаций.Реализация.ЗаказКлиента
	|	КОНЕЦ КАК ГрафикПоСоглашениюИлиЗаказ,
	|	ВЫБОР
	|		КОГДА втСписокРеализаций.Реализация.РеализацияПоЗаказам = ЛОЖЬ
	|			ТОГДА втСписокРеализаций.Реализация.ДатаПлатежа
	|		КОГДА втСписокРеализаций.Реализация.ПорядокРасчетов = &ПоНакладным
	|			ТОГДА втСписокРеализаций.Реализация.ДатаПлатежа
	|		КОГДА ВЫРАЗИТЬ(втСписокРеализаций.Реализация.ЗаказКлиента КАК Документ.ЗаказКлиента).ПорядокРасчетов = &ПоНакладным
	|			ТОГДА втСписокРеализаций.Реализация.ДатаПлатежа
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаПлатежа
	|ПОМЕСТИТЬ втРеализацииБезРазбиенияНаЭтапыОплат
	|ИЗ
	|	втСписокРеализаций КАК втСписокРеализаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРеализацииБезРазбиенияНаЭтапыОплат.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.ЗаказКлиента КАК ЗаказКлиента,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.Реализация КАК Реализация,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.РеализацияДата КАК РеализацияДата,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.РеализацияСклад КАК РеализацияСклад,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.СуммаДокумента КАК СуммаДокумента,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.Период КАК Период,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.СуммаОплачено КАК СуммаОплачено,
	|	ЕСТЬNULL(ЭтапыГрафикаОплатыПоЗаказу.ДатаПлатежа, втРеализацииБезРазбиенияНаЭтапыОплат.ДатаПлатежа) КАК ДатаПлатежа,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭтапыГрафикаОплаты.ВариантОплаты, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
	|			ТОГДА ЕСТЬNULL(ЭтапыГрафикаОплаты.Сдвиг, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сдвиг,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭтапыГрафикаОплатыПоЗаказу.ДатаПлатежа, втРеализацииБезРазбиенияНаЭтапыОплат.ДатаПлатежа) > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫРАЗИТЬ(втРеализацииБезРазбиенияНаЭтапыОплат.ГрафикПоСоглашениюИлиЗаказ КАК Справочник.ГрафикиОплаты).Календарь
	|	КОНЕЦ КАК Календарь,
	|	СУММА(втРеализацииБезРазбиенияНаЭтапыОплат.СуммаДокумента * ЕСТЬNULL(ЭтапыГрафикаОплаты.ПроцентПлатежа, 100) / 100 * ЕСТЬNULL(ЭтапыГрафикаОплатыПоЗаказу.ПроцентПлатежа, 100) / 100) КАК СуммаЭтапа
	|ПОМЕСТИТЬ втРеализацииСоСдвигом
	|ИЗ
	|	втРеализацииБезРазбиенияНаЭтапыОплат КАК втРеализацииБезРазбиенияНаЭтапыОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиОплаты.Этапы КАК ЭтапыГрафикаОплаты
	|		ПО втРеализацииБезРазбиенияНаЭтапыОплат.ГрафикПоСоглашениюИлиЗаказ = ЭтапыГрафикаОплаты.Ссылка
	|			И (втРеализацииБезРазбиенияНаЭтапыОплат.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказКлиента.ЭтапыГрафикаОплаты КАК ЭтапыГрафикаОплатыПоЗаказу
	|		ПО втРеализацииБезРазбиенияНаЭтапыОплат.ГрафикПоСоглашениюИлиЗаказ = ЭтапыГрафикаОплатыПоЗаказу.Ссылка
	|			И (втРеализацииБезРазбиенияНаЭтапыОплат.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	втРеализацииБезРазбиенияНаЭтапыОплат.АналитикаУчетаПоПартнерам,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.ЗаказКлиента,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.Реализация,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.РеализацияДата,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.РеализацияСклад,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.Период,
	|	ЕСТЬNULL(ЭтапыГрафикаОплатыПоЗаказу.ДатаПлатежа, втРеализацииБезРазбиенияНаЭтапыОплат.ДатаПлатежа),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭтапыГрафикаОплатыПоЗаказу.ДатаПлатежа, втРеализацииБезРазбиенияНаЭтапыОплат.ДатаПлатежа) > ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ВЫРАЗИТЬ(втРеализацииБезРазбиенияНаЭтапыОплат.ГрафикПоСоглашениюИлиЗаказ КАК Справочник.ГрафикиОплаты).Календарь
	|	КОНЕЦ,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.СуммаДокумента,
	|	втРеализацииБезРазбиенияНаЭтапыОплат.СуммаОплачено,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ЭтапыГрафикаОплаты.ВариантОплаты, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки)
	|			ТОГДА ЕСТЬNULL(ЭтапыГрафикаОплаты.Сдвиг, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втРеализацииСоСдвигом.Период КАК Период,
	|	втРеализацииСоСдвигом.Календарь КАК Календарь
	|ПОМЕСТИТЬ втКалендари
	|ИЗ
	|	втРеализацииСоСдвигом КАК втРеализацииСоСдвигом
	|ГДЕ
	|	втРеализацииСоСдвигом.Календарь <> НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втКалендари.Период КАК ДатаНачала,
	|	втКалендари.Календарь КАК Календарь,
	|	ГрафикиРаботы.Дата КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
	|				ИЛИ ГрафикиРаботы.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочийДень
	|ПОМЕСТИТЬ втГрафики
	|ИЗ
	|	втКалендари КАК втКалендари
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПроизводственногоКалендаря КАК ГрафикиРаботы
	|		ПО втКалендари.Календарь = ГрафикиРаботы.ПроизводственныйКалендарь
	|ГДЕ
	|	ГрафикиРаботы.Дата >= втКалендари.Период
	|	И втКалендари.Период <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Календарь КАК Календарь,
	|	ВложенныйЗапрос.ДатаНачала КАК ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания КАК ДатаОкончания,
	|	ЕСТЬNULL(СУММА(Графики.РабочийДень), 0) КАК КоличествоДней
	|ПОМЕСТИТЬ втРазностиДат
	|ИЗ
	|	втГрафики КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрафики КАК Графики
	|		ПО ВложенныйЗапрос.Календарь = Графики.Календарь
	|			И ВложенныйЗапрос.ДатаНачала = Графики.ДатаНачала
	|			И ВложенныйЗапрос.ДатаОкончания > Графики.ДатаОкончания
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.Календарь,
	|	ВложенныйЗапрос.ДатаНачала,
	|	ВложенныйЗапрос.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РазностиДат.Календарь КАК Календарь,
	|	РазностиДат.ДатаНачала КАК ДатаНачала,
	|	РазностиДат.КоличествоДней КАК КоличествоДней,
	|	МАКСИМУМ(РазностиДат.ДатаОкончания) КАК ДатаОкончания
	|ПОМЕСТИТЬ втРазностиДатСМаксимальнойДатой
	|ИЗ
	|	втРазностиДат КАК РазностиДат
	|
	|СГРУППИРОВАТЬ ПО
	|	РазностиДат.Календарь,
	|	РазностиДат.ДатаНачала,
	|	РазностиДат.КоличествоДней
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(_ПериодДействияКМ.ДатаНачалаДействия, ДЕНЬ) > &Дата1
	|			ТОГДА _ПериодДействияКМ.ДатаНачалаДействия
	|		ИНАЧЕ &Дата1
	|	КОНЕЦ КАК ДатаНачалаДействия,
	|	ВЫБОР
	|		КОГДА КОНЕЦПЕРИОДА(_ПериодДействияКМ.ДатаОкончанияДействия, ДЕНЬ) < &Дата2
	|			ТОГДА _ПериодДействияКМ.ДатаОкончанияДействия
	|		ИНАЧЕ КОНЕЦПЕРИОДА(&Дата2, ДЕНЬ)
	|	КОНЕЦ КАК ДатаОкончанияДействия
	|ПОМЕСТИТЬ втПериодДействияКМ
	|ИЗ
	|	РегистрСведений._ПериодДействияКМ КАК _ПериодДействияКМ
	|ГДЕ
	|	_ПериодДействияКМ.Партнер = &Партнер
	|	И _ПериодДействияКМ.УсловиеКМ = &УсловиеКМ
	|	И _ПериодДействияКМ.ДатаНачалаДействия <= &Дата2
	|	И _ПериодДействияКМ.ДатаОкончанияДействия >= &Дата1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРеализацииСоСдвигом.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втРеализацииСоСдвигом.ЗаказКлиента КАК ЗаказКлиента,
	|	втРеализацииСоСдвигом.Реализация КАК Регистратор,
	|	втРеализацииСоСдвигом.Реализация КАК Реализация,
	|	втРеализацииСоСдвигом.РеализацияСклад.РозничныйВидЦены КАК РозничныйВидЦены,
	|	втРеализацииСоСдвигом.СуммаДокумента КАК СуммаДокумента,
	|	втРеализацииСоСдвигом.Период КАК Период,
	|	втРеализацииСоСдвигом.СуммаОплачено КАК СуммаОплачено,
	|	СУММА(втРеализацииСоСдвигом.СуммаЭтапа) КАК СуммаЭтапов,
	|	МАКСИМУМ(ЕСТЬNULL(РазностиДат.ДатаОкончания, ВЫБОР
	|				КОГДА втРеализацииСоСдвигом.ДатаПлатежа = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ДОБАВИТЬКДАТЕ(втРеализацииСоСдвигом.Период, ДЕНЬ, втРеализацииСоСдвигом.Сдвиг)
	|				ИНАЧЕ втРеализацииСоСдвигом.ДатаПлатежа
	|			КОНЕЦ)) КАК ДатаОплатыПлан
	|ИЗ
	|	втРеализацииСоСдвигом КАК втРеализацииСоСдвигом
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРазностиДатСМаксимальнойДатой КАК РазностиДат
	|		ПО втРеализацииСоСдвигом.Календарь = РазностиДат.Календарь
	|			И втРеализацииСоСдвигом.Сдвиг = РазностиДат.КоличествоДней
	|			И втРеализацииСоСдвигом.Период = РазностиДат.ДатаНачала
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПериодДействияКМ КАК втПериодДействияКМ
	|		ПО втРеализацииСоСдвигом.РеализацияДата >= втПериодДействияКМ.ДатаНачалаДействия
	|			И втРеализацииСоСдвигом.РеализацияДата <= втПериодДействияКМ.ДатаОкончанияДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	втРеализацииСоСдвигом.АналитикаУчетаПоПартнерам,
	|	втРеализацииСоСдвигом.ЗаказКлиента,
	|	втРеализацииСоСдвигом.Реализация,
	|	втРеализацииСоСдвигом.РеализацияСклад.РозничныйВидЦены,
	|	втРеализацииСоСдвигом.Период,
	|	втРеализацииСоСдвигом.СуммаДокумента,
	|	втРеализацииСоСдвигом.СуммаОплачено,
	|	втРеализацииСоСдвигом.Реализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втРезультатПоПрочимОплаченнымДокументам.АналитикаУчетаПоПартнерам,
	|	втРезультатПоПрочимОплаченнымДокументам.ЗаказКлиента,
	|	втРезультатПоПрочимОплаченнымДокументам.Регистратор,
	|	втРезультатПоПрочимОплаченнымДокументам.Реализация,
	|	НЕОПРЕДЕЛЕНО,
	|	втРезультатПоПрочимОплаченнымДокументам.СуммаДокумента,
	|	втРезультатПоПрочимОплаченнымДокументам.Период,
	|	втРезультатПоПрочимОплаченнымДокументам.СуммаОплачено,
	|	0,
	|	втРезультатПоПрочимОплаченнымДокументам.ДатаПлатежа
	|ИЗ
	|	втРезультатПоПрочимОплаченнымДокументам КАК втРезультатПоПрочимОплаченнымДокументам
	|
	|ИТОГИ ПО
	|	АналитикаУчетаПоПартнерам,
	|	ЗаказКлиента");	
	
КонецФункции
&НаСервере
Функция ПолучитьТекстЗапросаПоОстаткамПоРегистраторам()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКлиентамиОстаткиИОбороты.Период КАК Период,
	|	РасчетыСКлиентамиОстаткиИОбороты.Регистратор КАК Регистратор,
	|	РасчетыСКлиентамиОстаткиИОбороты.ЗаказКлиента КАК ЗаказКлиента,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаНачальныйОстаток КАК СуммаНачальныйОстаток,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаОборот КАК СуммаОборот,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаПриход КАК СуммаПриход,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаРасход КАК СуммаРасход,
	|	РасчетыСКлиентамиОстаткиИОбороты.СуммаКонечныйОстаток КАК СуммаКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.ОстаткиИОбороты(&Дата1, &Дата2, Регистратор, Движения, АналитикаУчетаПоПартнерам = &АналитикаУчетаПоПартнерам И ЗаказКлиента = &ЗаказКлиента) КАК РасчетыСКлиентамиОстаткиИОбороты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|АВТОУПОРЯДОЧИВАНИЕ"
	;
	
КонецФункции
&НаСервере
Функция ПолучитьТекстЗапросаПоНоменклатуреРеализаций()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВыручкаИСебестоимостьПродажОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВыручкаИСебестоимостьПродажОбороты.Период
	|		ИНАЧЕ ВЫРАЗИТЬ(ВыручкаИСебестоимостьПродажОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента.Дата
	|	КОНЕЦ КАК Период,
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(ВыручкаИСебестоимостьПродажОбороты.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот) КАК СуммаВыручкиОборот
	|ПОМЕСТИТЬ втВыручкаПодготовка
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж.Обороты(, , Регистратор, ) КАК ВыручкаИСебестоимостьПродажОбороты
	|ГДЕ
	|	ВыручкаИСебестоимостьПродажОбороты.Регистратор = &ДокументПродажи
	|	И ВыручкаИСебестоимостьПродажОбороты.СуммаВыручкиОборот > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимостьПродажОбороты.АналитикаУчетаНоменклатуры.Номенклатура,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВыручкаИСебестоимостьПродажОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВыручкаИСебестоимостьПродажОбороты.Период
	|		ИНАЧЕ ВЫРАЗИТЬ(ВыручкаИСебестоимостьПродажОбороты.Регистратор КАК Документ.РеализацияТоваровУслуг).ЗаказКлиента.Дата
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыручкаПодготовка.Период КАК Период,
	|	втВыручкаПодготовка.Номенклатура КАК Номенклатура,
	|	МАКСИМУМ(втВыручкаПодготовка.КоличествоОборот) КАК КоличествоОборот,
	|	МАКСИМУМ(втВыручкаПодготовка.СуммаВыручкиОборот) КАК СуммаВыручкиОборот,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НоменклатураСегмента.Сегмент ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Исключить
	|ПОМЕСТИТЬ втВыручка
	|ИЗ
	|	втВыручкаПодготовка КАК втВыручкаПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураСегмента КАК НоменклатураСегмента
	|		ПО втВыручкаПодготовка.Номенклатура = НоменклатураСегмента.Номенклатура
	|			И (НоменклатураСегмента.Сегмент = &НеНачислятьКМ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втВыручкаПодготовка.Период,
	|	втВыручкаПодготовка.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыручка.Номенклатура КАК Номенклатура,
	|	втВыручка.Исключить КАК Исключить,
	|	втВыручка.КоличествоОборот КАК КоличествоОборот,
	|	втВыручка.СуммаВыручкиОборот КАК СуммаВыручкиОборот,
	|	МАКСИМУМ(ЦеныНоменклатуры.Период) КАК ПериодЦены
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	втВыручка КАК втВыручка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО втВыручка.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И втВыручка.Период >= ЦеныНоменклатуры.Период
	|			И (ЦеныНоменклатуры.ВидЦены = &ВидЦен)
	|
	|СГРУППИРОВАТЬ ПО
	|	втВыручка.Исключить,
	|	втВыручка.Номенклатура,
	|	втВыручка.КоличествоОборот,
	|	втВыручка.СуммаВыручкиОборот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Выборка.Номенклатура КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) КАК Цена,
	|	СУММА(Выборка.КоличествоОборот) КАК КоличествоОборот,
	|	СУММА(Выборка.СуммаВыручкиОборот) КАК СуммаВыручкиОборот,
	|	МАКСИМУМ((Выборка.Исключить И НЕ &БезИсключения)) КАК Исключить,
	|	ВЫБОР
	|		КОГДА Выборка.Исключить
	|			ТОГДА ВЫБОР
	|					КОГДА &БезИсключения
	|						ТОГДА &ПроцентКМ
	|					ИНАЧЕ 999
	|				КОНЕЦ
	|		ИНАЧЕ &ПроцентНаценки
	|	КОНЕЦ КАК Процент
	|ПОМЕСТИТЬ втВыручкаЦенаНаценка
	|ИЗ
	|	Временная КАК Выборка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены = &ВидЦен)
	|			И Выборка.Номенклатура = ЦеныНоменклатуры.Номенклатура
	|			И Выборка.ПериодЦены = ЦеныНоменклатуры.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	Выборка.Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0),
	|	ВЫБОР
	|		КОГДА Выборка.Исключить
	|			ТОГДА ВЫБОР
	|					КОГДА &БезИсключения
	|						ТОГДА &ПроцентКМ
	|					ИНАЧЕ 999
	|				КОНЕЦ
	|		ИНАЧЕ &ПроцентНаценки
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВыручкаЦенаНаценка.Номенклатура КАК Товар,
	|	СУММА(ВЫБОР КОГДА втВыручкаЦенаНаценка.Исключить ТОГДА втВыручкаЦенаНаценка.СуммаВыручкиОборот ИНАЧЕ 0 КОНЕЦ) КАК СуммаИсключения,
	|	СУММА(ВЫБОР
	|			КОГДА втВыручкаЦенаНаценка.Процент = 999
	|				ТОГДА втВыручкаЦенаНаценка.СуммаВыручкиОборот
	|			КОГДА втВыручкаЦенаНаценка.СуммаВыручкиОборот < втВыручкаЦенаНаценка.КоличествоОборот * втВыручкаЦенаНаценка.Цена + втВыручкаЦенаНаценка.КоличествоОборот * втВыручкаЦенаНаценка.Цена * втВыручкаЦенаНаценка.Процент / 100 - 1
	|				ТОГДА втВыручкаЦенаНаценка.СуммаВыручкиОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Вычесть
	|ИЗ
	|	втВыручкаЦенаНаценка КАК втВыручкаЦенаНаценка
	|
	|СГРУППИРОВАТЬ ПО
	|	втВыручкаЦенаНаценка.Номенклатура
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|			КОГДА втВыручкаЦенаНаценка.Процент = 999
	|				ТОГДА втВыручкаЦенаНаценка.СуммаВыручкиОборот
	|			КОГДА втВыручкаЦенаНаценка.СуммаВыручкиОборот < втВыручкаЦенаНаценка.КоличествоОборот * втВыручкаЦенаНаценка.Цена + втВыручкаЦенаНаценка.КоличествоОборот * втВыручкаЦенаНаценка.Цена * втВыручкаЦенаНаценка.Процент / 100 - 1
	|				ТОГДА втВыручкаЦенаНаценка.СуммаВыручкиОборот
	|		КОНЕЦ) > 0";
	
КонецФункции
&НаСервере
Функция ПолучитьТекстЗапросаПоВозвратамУчтенныхРеализаций()
	
	Возврат 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Обороты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Обороты.ЗаказКлиента КАК ЗаказКлиента,
	|	Обороты.Валюта КАК Валюта,
	|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента) КАК ВозвратТоваров,
	|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента).ДокументРеализации КАК Реализация,
	|	СУММА(-Обороты.СуммаОборот) КАК СуммаВозврата
	|ПОМЕСТИТЬ ОборотыПоВозвратам
	|ИЗ
	|	РегистрНакопления.РасчетыСКлиентами.Обороты(&Дата1, &Дата2, Регистратор, ) КАК Обороты
	|ГДЕ
	|	Обороты.СуммаОборот < 0
	|	И Обороты.Регистратор ССЫЛКА Документ.ВозвратТоваровОтКлиента
	|	И ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента).ДокументРеализации <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента).ДокументРеализации,
	|	ВЫРАЗИТЬ(Обороты.Регистратор КАК Документ.ВозвратТоваровОтКлиента),
	|	Обороты.ЗаказКлиента,
	|	Обороты.Валюта,
	|	Обороты.АналитикаУчетаПоПартнерам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыПоВозвратам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ОборотыПоВозвратам.АналитикаУчетаПоПартнерам.Партнер КАК ПартнерВозврата,
	|	_РасчетыПоКМОбороты.Партнер КАК ПартнерНачисления,
	|	ОборотыПоВозвратам.ЗаказКлиента КАК ЗаказКлиента,
	|	ОборотыПоВозвратам.Валюта КАК Валюта,
	|	ОборотыПоВозвратам.ВозвратТоваров КАК ВозвратТоваров,
	|	ОборотыПоВозвратам.Реализация КАК Реализация,
	|	ОборотыПоВозвратам.ВозвратТоваров.СуммаДокумента КАК ВозвратТоваровСуммаДокумента,
	|	ОборотыПоВозвратам.Реализация.СуммаДокумента КАК РеализацияСуммаДокумента,
	|	ОборотыПоВозвратам.СуммаВозврата КАК СуммаВозврата,
	|	СУММА(_РасчетыПоКМОбороты.НачисленоОборот) КАК Начислено
	|ИЗ
	|	ОборотыПоВозвратам КАК ОборотыПоВозвратам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления._РасчетыПоКМ.Обороты(, , Период, Условие = &Условие) КАК _РасчетыПоКМОбороты
	|		ПО ОборотыПоВозвратам.Реализация = _РасчетыПоКМОбороты.ДокументПродажи
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыПоВозвратам.ЗаказКлиента,
	|	ОборотыПоВозвратам.Реализация,
	|	ОборотыПоВозвратам.АналитикаУчетаПоПартнерам,
	|	ОборотыПоВозвратам.АналитикаУчетаПоПартнерам.Партнер,
	|	_РасчетыПоКМОбороты.Партнер,
	|	ОборотыПоВозвратам.Валюта,
	|	ОборотыПоВозвратам.ВозвратТоваров,
	|	ОборотыПоВозвратам.СуммаВозврата,
	|	ОборотыПоВозвратам.ВозвратТоваров.СуммаДокумента,
	|	ОборотыПоВозвратам.Реализация.СуммаДокумента
	|ИТОГИ
	|	МАКСИМУМ(АналитикаУчетаПоПартнерам),
	|	МАКСИМУМ(ПартнерВозврата),
	|	МАКСИМУМ(ПартнерНачисления),
	|	МАКСИМУМ(ЗаказКлиента),
	|	МАКСИМУМ(Валюта),
	|	МАКСИМУМ(СуммаВозврата),
	|	СУММА(Начислено)
	|ПО
	|	Реализация"
	;
		
КонецФункции
&НаСервере
Функция РаспаковкаТекстаЗапроса(ТекстЗапроса) 
	
	РазмерШага = 536870912; // 2^29 секунд - это 17 лет назад - февраль 1997 года!  	
	Разделители = СтрВхождения(ТекстЗапроса, ";");                                    	
	Рефрен = Сред(ТекстЗапроса, Разделители[5] + 1, Разделители[6] - Разделители[5]);
	Рефрены = "";
	ДопРефрены = "";
	Пока РазмерШага > 1 Цикл 
		Рефрены 	= Рефрены + СтрЗаменить(СтрЗаменить(Рефрен, "Шаг_1", "Шаг_" + Формат(РазмерШага / 2, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		ДопРефрены 	= ДопРефрены + СтрЗаменить(СтрЗаменить(СтрЗаменить(Рефрен, "Шаг_1", "ДопШаг_" + Формат(РазмерШага / 2, "ЧГ=0")), "Шаг_536870912", "ДопШаг_"+Формат(РазмерШага, "ЧГ=0")), "536870912", Формат(РазмерШага, "ЧГ=0")); 
		РазмерШага 	= РазмерШага / 2
	КонецЦикла;
	
	Возврат
	Сред(ТекстЗапроса, 1, Разделители[5]) + Рефрены + Сред(ТекстЗапроса, Разделители[6] + 1, Разделители[8]-Разделители[6])
	+
	Сред(ТекстЗапроса, Разделители[8]+1, Разделители[9]-Разделители[8]) + ДопРефрены + Сред(ТекстЗапроса, Разделители[10] + 1)
	;
	
КонецФункции
&НаСервере
Функция СтрВхождения(Строка, ПодстрокаПоиска, ё = 0)	
	Ответ = Новый Массив;  	
	Для ж = 1 По СтрЧислоВхождений(Строка, ПодстрокаПоиска) Цикл  		
		ё = Найти(Сред(Строка, ё + 1), ПодстрокаПоиска) + ё; 
		Ответ.Добавить(ё)    		
	КонецЦикла; 	
	Возврат Ответ  	
КонецФункции

#КонецОбласти



